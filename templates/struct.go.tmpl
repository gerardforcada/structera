package {{.PackageName}}

import (
    "fmt"
    "{{.ModulePackage}}/detector"
    "{{.ModulePackage}}/interfaces"
    {{if .CustomType}}
    originalPackage "{{.ImportPath}}"
    {{end}}
{{- range .ExistingImports}}
    "{{.}}"
{{- end}}
)

type {{.StructName.Original}}AllFields struct {
{{- range .Fields}}
    {{.FormattedName}} {{.Type}}{{if .Tag}} `{{.Tag}}`{{end}}
{{- end}}
}

const (
{{- range .Versions}}
    {{$.StructName.Original}}Version{{.}} int = {{.}}
{{- end}}
)

// {{$.StructName.Original}}Versions struct
type {{.StructName.Original}}Versions struct {
{{- range .Versions}}
    V{{.}} {{$.StructName.Original}}V{{.}}
{{- end}}
}

// {{$.StructName.Original}} struct
type {{.StructName.Original}} struct {
    {{.StructName.Original}}AllFields
    {{.StructName.Original}}Versions
}

// GetVersionStructs method for the struct
func (hub {{.StructName.Original}}) GetVersionStructs() []interfaces.Era {
    return []interfaces.Era{
{{- range .Versions}}
        {{$.StructName.Original}}V{{.}}{},
{{- end}}
    }
}

func (hub {{.StructName.Original}}) GetEraFromVersion(version int) (interfaces.Era, error) {
    switch version {
{{- range .Versions}}
    case {{$.StructName.Original}}Version{{.}}:
        return hub.{{$.StructName.Original}}Versions.V{{.}}, nil
{{- end}}
    default:
        return nil, fmt.Errorf("unknown version %d", version)
    }
}

func (hub {{.StructName.Original}}) GetBaseStruct() interface{} {
    return hub.{{.StructName.Original}}AllFields
}

func (hub {{.StructName.Original}}) DetectVersion() int {
    return detector.BestMatchingEra[{{.StructName.Original}}](hub)
}

func (hub {{.StructName.Original}}) GetVersions() []int {
    return []int{
{{- range .Versions}}
        {{$.StructName.Original}}Version{{.}},
{{- end}}
    }
}

func (hub {{.StructName.Original}}) GetMinVersion() int {
    return {{.StructName.Original}}Version1
}

func (hub {{.StructName.Original}}) GetMaxVersion() int {
    return {{.StructName.Original}}Version{{index .Versions (sub (len .Versions) 1)}}
}

{{- range $version, $fields := .VersionedFields}}
// {{$.StructName.Original}}V{{$version}} Version-specific struct types and methods
type {{$.StructName.Original}}V{{$version}} struct {
{{- range $fields}}
    {{.FormattedName}} {{.Type}}{{if .Tag}} `{{.Tag}}`{{end}}
{{- end}}
}

func (era {{$.StructName.Original}}V{{$version}}) GetVersion() int {
    return {{$.StructName.Original}}Version{{$version}}
}

func (era {{$.StructName.Original}}V{{$version}}) GetName() string {
    return "{{$.StructName.Snake}}"
}

func (era {{$.StructName.Original}}V{{$version}}) GetHub() interfaces.Hub {
    return {{$.StructName.Original}}{
        {{$.StructName.Original}}AllFields: {{$.StructName.Original}}AllFields{
            {{- range $fields}}
            {{.Name}}: &era.{{.Name}},
            {{- end}}
        },
    }
}
{{- end}}